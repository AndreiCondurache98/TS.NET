//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferencePerson
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/MyPhotosCore.Context", IsReference=true)]
    public partial class Person : object
    {
        
        private string FirstNameField;
        
        private string LastNameField;
        
        private int PersonIdField;
        
        private System.Collections.Generic.List<ServiceReferencePhoto.Photo> PhotosField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName
        {
            get
            {
                return this.FirstNameField;
            }
            set
            {
                this.FirstNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName
        {
            get
            {
                return this.LastNameField;
            }
            set
            {
                this.LastNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId
        {
            get
            {
                return this.PersonIdField;
            }
            set
            {
                this.PersonIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferencePhoto.Photo> Photos
        {
            get
            {
                return this.PhotosField;
            }
            set
            {
                this.PhotosField = value;
            }
        }
    }
    
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePerson.IPerson")]
    public interface IPerson
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerson/GetPeople", ReplyAction="http://tempuri.org/IPerson/GetPeopleResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePerson.Person>> GetPeopleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerson/GetPerson", ReplyAction="http://tempuri.org/IPerson/GetPersonResponse")]
        System.Threading.Tasks.Task<ServiceReferencePerson.Person> GetPersonAsync(int personId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerson/AddPerson", ReplyAction="http://tempuri.org/IPerson/AddPersonResponse")]
        System.Threading.Tasks.Task AddPersonAsync(ServiceReferencePerson.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerson/VerifyPersonExists", ReplyAction="http://tempuri.org/IPerson/VerifyPersonExistsResponse")]
        System.Threading.Tasks.Task<bool> VerifyPersonExistsAsync(ServiceReferencePerson.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerson/GetPeopleOfPhoto", ReplyAction="http://tempuri.org/IPerson/GetPeopleOfPhotoResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePerson.Person>> GetPeopleOfPhotoAsync(ServiceReferencePhoto.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerson/SearchByFullName", ReplyAction="http://tempuri.org/IPerson/SearchByFullNameResponse")]
        System.Threading.Tasks.Task<ServiceReferencePerson.Person> SearchByFullNameAsync(string fullName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPerson/AddPhotoToPerson", ReplyAction="http://tempuri.org/IPerson/AddPhotoToPersonResponse")]
        System.Threading.Tasks.Task AddPhotoToPersonAsync(ServiceReferencePhoto.Photo photo, ServiceReferencePerson.Person person);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IPersonChannel : ServiceReferencePerson.IPerson, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class PersonClient : System.ServiceModel.ClientBase<ServiceReferencePerson.IPerson>, ServiceReferencePerson.IPerson
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PersonClient() : 
                base(PersonClient.GetDefaultBinding(), PersonClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPerson.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonClient(EndpointConfiguration endpointConfiguration) : 
                base(PersonClient.GetBindingForEndpoint(endpointConfiguration), PersonClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PersonClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PersonClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PersonClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePerson.Person>> GetPeopleAsync()
        {
            return base.Channel.GetPeopleAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePerson.Person> GetPersonAsync(int personId)
        {
            return base.Channel.GetPersonAsync(personId);
        }
        
        public System.Threading.Tasks.Task AddPersonAsync(ServiceReferencePerson.Person person)
        {
            return base.Channel.AddPersonAsync(person);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyPersonExistsAsync(ServiceReferencePerson.Person person)
        {
            return base.Channel.VerifyPersonExistsAsync(person);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePerson.Person>> GetPeopleOfPhotoAsync(ServiceReferencePhoto.Photo photo)
        {
            return base.Channel.GetPeopleOfPhotoAsync(photo);
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePerson.Person> SearchByFullNameAsync(string fullName)
        {
            return base.Channel.SearchByFullNameAsync(fullName);
        }
        
        public System.Threading.Tasks.Task AddPhotoToPersonAsync(ServiceReferencePhoto.Photo photo, ServiceReferencePerson.Person person)
        {
            return base.Channel.AddPhotoToPersonAsync(photo, person);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPerson))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPerson))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8003/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PersonClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPerson);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PersonClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPerson);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPerson,
        }
    }
}
