//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPhotosCore.Context
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/MyPhotosCore.Context", IsReference=true)]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int LocationIdField;
        
        private string NameField;
        
        private MyPhotosCore.Context.Photo[] PhotosField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId
        {
            get
            {
                return this.LocationIdField;
            }
            set
            {
                this.LocationIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosCore.Context.Photo[] Photos
        {
            get
            {
                return this.PhotosField;
            }
            set
            {
                this.PhotosField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ILocation")]
public interface ILocation
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetLocations", ReplyAction="http://tempuri.org/ILocation/GetLocationsResponse")]
    MyPhotosCore.Context.Location[] GetLocations();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/GetLocations", ReplyAction="http://tempuri.org/ILocation/GetLocationsResponse")]
    System.Threading.Tasks.Task<MyPhotosCore.Context.Location[]> GetLocationsAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/AddLocation", ReplyAction="http://tempuri.org/ILocation/AddLocationResponse")]
    void AddLocation(MyPhotosCore.Context.Location location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/AddLocation", ReplyAction="http://tempuri.org/ILocation/AddLocationResponse")]
    System.Threading.Tasks.Task AddLocationAsync(MyPhotosCore.Context.Location location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/VerifyLocationExists", ReplyAction="http://tempuri.org/ILocation/VerifyLocationExistsResponse")]
    bool VerifyLocationExists(MyPhotosCore.Context.Location location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/VerifyLocationExists", ReplyAction="http://tempuri.org/ILocation/VerifyLocationExistsResponse")]
    System.Threading.Tasks.Task<bool> VerifyLocationExistsAsync(MyPhotosCore.Context.Location location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/SearchByName", ReplyAction="http://tempuri.org/ILocation/SearchByNameResponse")]
    MyPhotosCore.Context.Location SearchByName(string locationName);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILocation/SearchByName", ReplyAction="http://tempuri.org/ILocation/SearchByNameResponse")]
    System.Threading.Tasks.Task<MyPhotosCore.Context.Location> SearchByNameAsync(string locationName);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ILocationChannel : ILocation, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class LocationClient : System.ServiceModel.ClientBase<ILocation>, ILocation
{
    
    public LocationClient()
    {
    }
    
    public LocationClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public LocationClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public LocationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public LocationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public MyPhotosCore.Context.Location[] GetLocations()
    {
        return base.Channel.GetLocations();
    }
    
    public System.Threading.Tasks.Task<MyPhotosCore.Context.Location[]> GetLocationsAsync()
    {
        return base.Channel.GetLocationsAsync();
    }
    
    public void AddLocation(MyPhotosCore.Context.Location location)
    {
        base.Channel.AddLocation(location);
    }
    
    public System.Threading.Tasks.Task AddLocationAsync(MyPhotosCore.Context.Location location)
    {
        return base.Channel.AddLocationAsync(location);
    }
    
    public bool VerifyLocationExists(MyPhotosCore.Context.Location location)
    {
        return base.Channel.VerifyLocationExists(location);
    }
    
    public System.Threading.Tasks.Task<bool> VerifyLocationExistsAsync(MyPhotosCore.Context.Location location)
    {
        return base.Channel.VerifyLocationExistsAsync(location);
    }
    
    public MyPhotosCore.Context.Location SearchByName(string locationName)
    {
        return base.Channel.SearchByName(locationName);
    }
    
    public System.Threading.Tasks.Task<MyPhotosCore.Context.Location> SearchByNameAsync(string locationName)
    {
        return base.Channel.SearchByNameAsync(locationName);
    }
}
