//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyPhotosCore.Context
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/MyPhotosCore.Context", IsReference=true)]
    public partial class Photo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime DateCreatedField;
        
        private string DescriptionField;
        
        private string EventField;
        
        private string FilePathField;
        
        private MyPhotosCore.Context.Location LocationField;
        
        private int LocationIdField;
        
        private MyPhotosCore.Context.Person[] PeopleField;
        
        private int PhotoIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated
        {
            get
            {
                return this.DateCreatedField;
            }
            set
            {
                this.DateCreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath
        {
            get
            {
                return this.FilePathField;
            }
            set
            {
                this.FilePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosCore.Context.Location Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId
        {
            get
            {
                return this.LocationIdField;
            }
            set
            {
                this.LocationIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MyPhotosCore.Context.Person[] People
        {
            get
            {
                return this.PeopleField;
            }
            set
            {
                this.PeopleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoId
        {
            get
            {
                return this.PhotoIdField;
            }
            set
            {
                this.PhotoIdField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IPhoto")]
public interface IPhoto
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotos", ReplyAction="http://tempuri.org/IPhoto/GetPhotosResponse")]
    MyPhotosCore.Context.Photo[] GetPhotos();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotos", ReplyAction="http://tempuri.org/IPhoto/GetPhotosResponse")]
    System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> GetPhotosAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotoById", ReplyAction="http://tempuri.org/IPhoto/GetPhotoByIdResponse")]
    MyPhotosCore.Context.Photo GetPhotoById(int photoId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotoById", ReplyAction="http://tempuri.org/IPhoto/GetPhotoByIdResponse")]
    System.Threading.Tasks.Task<MyPhotosCore.Context.Photo> GetPhotoByIdAsync(int photoId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/AddPhoto", ReplyAction="http://tempuri.org/IPhoto/AddPhotoResponse")]
    void AddPhoto(MyPhotosCore.Context.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/AddPhoto", ReplyAction="http://tempuri.org/IPhoto/AddPhotoResponse")]
    System.Threading.Tasks.Task AddPhotoAsync(MyPhotosCore.Context.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/UpdateLocationOfPhoto", ReplyAction="http://tempuri.org/IPhoto/UpdateLocationOfPhotoResponse")]
    void UpdateLocationOfPhoto(int photoId, MyPhotosCore.Context.Location location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/UpdateLocationOfPhoto", ReplyAction="http://tempuri.org/IPhoto/UpdateLocationOfPhotoResponse")]
    System.Threading.Tasks.Task UpdateLocationOfPhotoAsync(int photoId, MyPhotosCore.Context.Location location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/DeletePhoto", ReplyAction="http://tempuri.org/IPhoto/DeletePhotoResponse")]
    void DeletePhoto(int photoId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/DeletePhoto", ReplyAction="http://tempuri.org/IPhoto/DeletePhotoResponse")]
    System.Threading.Tasks.Task DeletePhotoAsync(int photoId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/VerifyPhotoExists", ReplyAction="http://tempuri.org/IPhoto/VerifyPhotoExistsResponse")]
    bool VerifyPhotoExists(MyPhotosCore.Context.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/VerifyPhotoExists", ReplyAction="http://tempuri.org/IPhoto/VerifyPhotoExistsResponse")]
    System.Threading.Tasks.Task<bool> VerifyPhotoExistsAsync(MyPhotosCore.Context.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotosOfPerson", ReplyAction="http://tempuri.org/IPhoto/GetPhotosOfPersonResponse")]
    MyPhotosCore.Context.Photo[] GetPhotosOfPerson(MyPhotosCore.Context.Person person);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotosOfPerson", ReplyAction="http://tempuri.org/IPhoto/GetPhotosOfPersonResponse")]
    System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> GetPhotosOfPersonAsync(MyPhotosCore.Context.Person person);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotosOfLocation", ReplyAction="http://tempuri.org/IPhoto/GetPhotosOfLocationResponse")]
    MyPhotosCore.Context.Photo[] GetPhotosOfLocation(MyPhotosCore.Context.Location location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotosOfLocation", ReplyAction="http://tempuri.org/IPhoto/GetPhotosOfLocationResponse")]
    System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> GetPhotosOfLocationAsync(MyPhotosCore.Context.Location location);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/AddPersonToPhoto", ReplyAction="http://tempuri.org/IPhoto/AddPersonToPhotoResponse")]
    void AddPersonToPhoto(MyPhotosCore.Context.Person person, MyPhotosCore.Context.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/AddPersonToPhoto", ReplyAction="http://tempuri.org/IPhoto/AddPersonToPhotoResponse")]
    System.Threading.Tasks.Task AddPersonToPhotoAsync(MyPhotosCore.Context.Person person, MyPhotosCore.Context.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/SearchPhotosByEvent", ReplyAction="http://tempuri.org/IPhoto/SearchPhotosByEventResponse")]
    MyPhotosCore.Context.Photo[] SearchPhotosByEvent(string eveniment);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/SearchPhotosByEvent", ReplyAction="http://tempuri.org/IPhoto/SearchPhotosByEventResponse")]
    System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> SearchPhotosByEventAsync(string eveniment);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/SearchPhotosByYear", ReplyAction="http://tempuri.org/IPhoto/SearchPhotosByYearResponse")]
    MyPhotosCore.Context.Photo[] SearchPhotosByYear(int year);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/SearchPhotosByYear", ReplyAction="http://tempuri.org/IPhoto/SearchPhotosByYearResponse")]
    System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> SearchPhotosByYearAsync(int year);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IPhotoChannel : IPhoto, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class PhotoClient : System.ServiceModel.ClientBase<IPhoto>, IPhoto
{
    
    public PhotoClient()
    {
    }
    
    public PhotoClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public PhotoClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public PhotoClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public PhotoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public MyPhotosCore.Context.Photo[] GetPhotos()
    {
        return base.Channel.GetPhotos();
    }
    
    public System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> GetPhotosAsync()
    {
        return base.Channel.GetPhotosAsync();
    }
    
    public MyPhotosCore.Context.Photo GetPhotoById(int photoId)
    {
        return base.Channel.GetPhotoById(photoId);
    }
    
    public System.Threading.Tasks.Task<MyPhotosCore.Context.Photo> GetPhotoByIdAsync(int photoId)
    {
        return base.Channel.GetPhotoByIdAsync(photoId);
    }
    
    public void AddPhoto(MyPhotosCore.Context.Photo photo)
    {
        base.Channel.AddPhoto(photo);
    }
    
    public System.Threading.Tasks.Task AddPhotoAsync(MyPhotosCore.Context.Photo photo)
    {
        return base.Channel.AddPhotoAsync(photo);
    }
    
    public void UpdateLocationOfPhoto(int photoId, MyPhotosCore.Context.Location location)
    {
        base.Channel.UpdateLocationOfPhoto(photoId, location);
    }
    
    public System.Threading.Tasks.Task UpdateLocationOfPhotoAsync(int photoId, MyPhotosCore.Context.Location location)
    {
        return base.Channel.UpdateLocationOfPhotoAsync(photoId, location);
    }
    
    public void DeletePhoto(int photoId)
    {
        base.Channel.DeletePhoto(photoId);
    }
    
    public System.Threading.Tasks.Task DeletePhotoAsync(int photoId)
    {
        return base.Channel.DeletePhotoAsync(photoId);
    }
    
    public bool VerifyPhotoExists(MyPhotosCore.Context.Photo photo)
    {
        return base.Channel.VerifyPhotoExists(photo);
    }
    
    public System.Threading.Tasks.Task<bool> VerifyPhotoExistsAsync(MyPhotosCore.Context.Photo photo)
    {
        return base.Channel.VerifyPhotoExistsAsync(photo);
    }
    
    public MyPhotosCore.Context.Photo[] GetPhotosOfPerson(MyPhotosCore.Context.Person person)
    {
        return base.Channel.GetPhotosOfPerson(person);
    }
    
    public System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> GetPhotosOfPersonAsync(MyPhotosCore.Context.Person person)
    {
        return base.Channel.GetPhotosOfPersonAsync(person);
    }
    
    public MyPhotosCore.Context.Photo[] GetPhotosOfLocation(MyPhotosCore.Context.Location location)
    {
        return base.Channel.GetPhotosOfLocation(location);
    }
    
    public System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> GetPhotosOfLocationAsync(MyPhotosCore.Context.Location location)
    {
        return base.Channel.GetPhotosOfLocationAsync(location);
    }
    
    public void AddPersonToPhoto(MyPhotosCore.Context.Person person, MyPhotosCore.Context.Photo photo)
    {
        base.Channel.AddPersonToPhoto(person, photo);
    }
    
    public System.Threading.Tasks.Task AddPersonToPhotoAsync(MyPhotosCore.Context.Person person, MyPhotosCore.Context.Photo photo)
    {
        return base.Channel.AddPersonToPhotoAsync(person, photo);
    }
    
    public MyPhotosCore.Context.Photo[] SearchPhotosByEvent(string eveniment)
    {
        return base.Channel.SearchPhotosByEvent(eveniment);
    }
    
    public System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> SearchPhotosByEventAsync(string eveniment)
    {
        return base.Channel.SearchPhotosByEventAsync(eveniment);
    }
    
    public MyPhotosCore.Context.Photo[] SearchPhotosByYear(int year)
    {
        return base.Channel.SearchPhotosByYear(year);
    }
    
    public System.Threading.Tasks.Task<MyPhotosCore.Context.Photo[]> SearchPhotosByYearAsync(int year)
    {
        return base.Channel.SearchPhotosByYearAsync(year);
    }
}
