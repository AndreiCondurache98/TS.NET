//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReferencePhoto
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/MyPhotosCore.Context", IsReference=true)]
    public partial class Photo : object
    {
        
        private System.DateTime DateCreatedField;
        
        private string DescriptionField;
        
        private string EventField;
        
        private string FilePathField;
        
        private ServiceReferenceLocation.Location LocationField;
        
        private int LocationIdField;
        
        private System.Collections.Generic.List<ServiceReferencePerson.Person> PeopleField;
        
        private int PhotoIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateCreated
        {
            get
            {
                return this.DateCreatedField;
            }
            set
            {
                this.DateCreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Event
        {
            get
            {
                return this.EventField;
            }
            set
            {
                this.EventField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilePath
        {
            get
            {
                return this.FilePathField;
            }
            set
            {
                this.FilePathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ServiceReferenceLocation.Location Location
        {
            get
            {
                return this.LocationField;
            }
            set
            {
                this.LocationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocationId
        {
            get
            {
                return this.LocationIdField;
            }
            set
            {
                this.LocationIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ServiceReferencePerson.Person> People
        {
            get
            {
                return this.PeopleField;
            }
            set
            {
                this.PeopleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoId
        {
            get
            {
                return this.PhotoIdField;
            }
            set
            {
                this.PhotoIdField = value;
            }
        }
    }
    
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferencePhoto.IPhoto")]
    public interface IPhoto
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotos", ReplyAction="http://tempuri.org/IPhoto/GetPhotosResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> GetPhotosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotoById", ReplyAction="http://tempuri.org/IPhoto/GetPhotoByIdResponse")]
        System.Threading.Tasks.Task<ServiceReferencePhoto.Photo> GetPhotoByIdAsync(int photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/AddPhoto", ReplyAction="http://tempuri.org/IPhoto/AddPhotoResponse")]
        System.Threading.Tasks.Task AddPhotoAsync(ServiceReferencePhoto.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/UpdateLocationOfPhoto", ReplyAction="http://tempuri.org/IPhoto/UpdateLocationOfPhotoResponse")]
        System.Threading.Tasks.Task UpdateLocationOfPhotoAsync(int photoId, ServiceReferenceLocation.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/DeletePhoto", ReplyAction="http://tempuri.org/IPhoto/DeletePhotoResponse")]
        System.Threading.Tasks.Task DeletePhotoAsync(int photoId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/VerifyPhotoExists", ReplyAction="http://tempuri.org/IPhoto/VerifyPhotoExistsResponse")]
        System.Threading.Tasks.Task<bool> VerifyPhotoExistsAsync(ServiceReferencePhoto.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotosOfPerson", ReplyAction="http://tempuri.org/IPhoto/GetPhotosOfPersonResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> GetPhotosOfPersonAsync(ServiceReferencePerson.Person person);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/GetPhotosOfLocation", ReplyAction="http://tempuri.org/IPhoto/GetPhotosOfLocationResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> GetPhotosOfLocationAsync(ServiceReferenceLocation.Location location);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/AddPersonToPhoto", ReplyAction="http://tempuri.org/IPhoto/AddPersonToPhotoResponse")]
        System.Threading.Tasks.Task AddPersonToPhotoAsync(ServiceReferencePerson.Person person, ServiceReferencePhoto.Photo photo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/SearchPhotosByEvent", ReplyAction="http://tempuri.org/IPhoto/SearchPhotosByEventResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> SearchPhotosByEventAsync(string eveniment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPhoto/SearchPhotosByYear", ReplyAction="http://tempuri.org/IPhoto/SearchPhotosByYearResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> SearchPhotosByYearAsync(int year);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IPhotoChannel : ServiceReferencePhoto.IPhoto, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class PhotoClient : System.ServiceModel.ClientBase<ServiceReferencePhoto.IPhoto>, ServiceReferencePhoto.IPhoto
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public PhotoClient() : 
                base(PhotoClient.GetDefaultBinding(), PhotoClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IPhoto.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoClient(EndpointConfiguration endpointConfiguration) : 
                base(PhotoClient.GetBindingForEndpoint(endpointConfiguration), PhotoClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(PhotoClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(PhotoClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public PhotoClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> GetPhotosAsync()
        {
            return base.Channel.GetPhotosAsync();
        }
        
        public System.Threading.Tasks.Task<ServiceReferencePhoto.Photo> GetPhotoByIdAsync(int photoId)
        {
            return base.Channel.GetPhotoByIdAsync(photoId);
        }
        
        public System.Threading.Tasks.Task AddPhotoAsync(ServiceReferencePhoto.Photo photo)
        {
            return base.Channel.AddPhotoAsync(photo);
        }
        
        public System.Threading.Tasks.Task UpdateLocationOfPhotoAsync(int photoId, ServiceReferenceLocation.Location location)
        {
            return base.Channel.UpdateLocationOfPhotoAsync(photoId, location);
        }
        
        public System.Threading.Tasks.Task DeletePhotoAsync(int photoId)
        {
            return base.Channel.DeletePhotoAsync(photoId);
        }
        
        public System.Threading.Tasks.Task<bool> VerifyPhotoExistsAsync(ServiceReferencePhoto.Photo photo)
        {
            return base.Channel.VerifyPhotoExistsAsync(photo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> GetPhotosOfPersonAsync(ServiceReferencePerson.Person person)
        {
            return base.Channel.GetPhotosOfPersonAsync(person);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> GetPhotosOfLocationAsync(ServiceReferenceLocation.Location location)
        {
            return base.Channel.GetPhotosOfLocationAsync(location);
        }
        
        public System.Threading.Tasks.Task AddPersonToPhotoAsync(ServiceReferencePerson.Person person, ServiceReferencePhoto.Photo photo)
        {
            return base.Channel.AddPersonToPhotoAsync(person, photo);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> SearchPhotosByEventAsync(string eveniment)
        {
            return base.Channel.SearchPhotosByEventAsync(eveniment);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ServiceReferencePhoto.Photo>> SearchPhotosByYearAsync(int year)
        {
            return base.Channel.SearchPhotosByYearAsync(year);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPhoto))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IPhoto))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8001/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return PhotoClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IPhoto);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return PhotoClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IPhoto);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IPhoto,
        }
    }
}
